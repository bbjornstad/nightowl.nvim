contexts:
  - name: Metacontext
    domainVisionStatement: |
      To describe core component types for my lazyvim configuration in a
      descriptive and accessible way
  - name: Keymapping
    domainVisionStatement: |
      To elucidate certain uses of mathematical terminology as applied to the
      process of defining keymaps for neovim.
    terms:
      - name: Keybind
        definition: |
          conceptually, an item which represents both a sequence of keystrokes
          entered on a keyboard in a Neovim window, together with the associated
          triggered action (plus any metadata such as description, etc.)
        examples: |
          - The Keybind { "<leader>fr", function()
          require('telescope.builtin').oldfiles() end, mode = "n", desc =
          "recent files" } is a representation in lazy.nvim spec style
      - name: Leader
        definition: |
          Typically, a specific key can be defined as a vim-option to be the
          "leader" key. If you are not already somewhat familiar with the
          desired behavior when using this key, then I would recommend you do
          some additional research as this implementation makes heavy use of the
          behavior. Generally, a prefix that must be entered prior to an
          action-identifying keybind, allowing differentiation of the "menus"
          generated by keybindings.
  - name: CameralComponents
    domainVisionStatement: |
      Defines the components that are required or optionally added to create my
      personal neovim configuration, nightowl.nvim or parliament.nvim. The
      `Cameral` designation is a play on the fact that in the US, congress is a
      bicameral affair. Parliament is not used in the US, but the pun remains.
    terms:
      - name: Plugins
        definition: |
          Custom configurations of neovim plugins available via GitHub or other
          source repositories online or locally defined.
      - name: Utils
        definition: |
          Parliament specific utility functions defined for the purposes of
          making my own neovim configuration more easily maintainable. These are
          not general purpose tools per-se, but rather tools designed to solve
          specific issues which have arisen in constructing parliament.nvim
      - name: Flex
        definition: |
          User provided specifications for lazyflex.nvim. This is highly
          specific to the current implementation of parliament.nvim, but
          generally speaking lazyflex provides a more granular way of disabling
          or enabling plugin components and grouping them according to intended
          use.
      - name: Config
        definition: |
          Core configuration files for parliament.nvim, this is for things which
          are closer to a vim-internal level than most plugin specifications as
          described by lazy.nvim. In other words, low-level keymaps,
          autocommands, options defintions, etc. should go in this component.
  - name: LanguageProtocol
    domainVisionStatement: |
      To identify the core programming language definition specification fields
    terms:
      - name: Server
        definition: |
          the backend component which handles the language-server-protocol
          implementation and behavior for a given language.
      - name: Enhancement
        definition: |
          a plugin component or other user-defined functionality which modulates
          the typical LSP behavior with extra features like virtual-types
  - name: CodeFacets
    domainVisionStatemenet: |
      Aspects of the code and implementation details that are relevant for user
      configurability and utilizing the functionality of the parliament system
    terms:
      - name: Callback
        definition: |
          A function whose input arguments accept at least another function,
          which will be temporarily stored referentially and called at a later
          time, when certain code conditions have been met or a set of
          circumstances arises which triggers the execution
      - name: Handler
        definition: |
          A handler is a type of function--which is also frequently a
          Callback--which is more specifically responsible for "handling" a
          certain set of behaviors, or helping other functions "handle" arisen
          code situations.
  - name: funsak
    domainVisionStatement: |
      The FUNctional Swiss Army Knife for neovim configurations
      powered with lazy.nvim; provides a set of utility functions and
      multi-purpose tools for writing configurations in neovim that use
      lazy.nvim to manage pluginm; provides a set of utility functions and
      multi-purpose tools for writing configurations in neovim that use
      lazy.nvim to manage plugins, e.g. LazyVim, Kickstart, etc.
  - name: parliament
    domainVisionStatement: |
      Tools and utilities that are personal implementations and specific to my
      own neovim configuration, known as nightowl.nvim or parliament.nvim.
      Generally speaking, these are expected to not be useful in another context
      without additional modifications.
