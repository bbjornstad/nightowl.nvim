local env = require("environment.ui")
local stems = require("environment.keys").stems
local mapx = vim.keymap.set
local key_tterm = stems.tterm
local key_block = stems.block
local key_easyread = stems.easyread
local key_treesj = stems.treesj

-- these are the core interface items. These are the base upon which the other
-- interface items are built. At the bottom of this file we merge all of the
-- loaded components together.
local iface_core = {

  {
    "jghauser/mkdir.nvim",
    event = "BufWrite",
  },

--   {
--     "arjunmahishi/flow.nvim",
--     cmd = {
--       "FlowRunSelected",
--       "FlowRunFile",
--       "FlowSetCustomCmd",
--       "FlowRunCustomCmd",
--       "FlowLauncher",
--       "FlowRunLastCmd",
--       "FlowLastOutput",
--     },
--     config = true,
--     opts = function(_, opts)
--       opts.output = vim.tbl_extend("force", {
--         buffer = true,
--         split_cmd = "20split",
--       }, opts.output or {})
--
--       -- add/override the default command used for a perticular filetype
--       -- the "%s" you see in the below example is interpolated by the contents of
--       -- the file you are trying to run
--       -- Format { <filetype> = <command> }
--       opts.filetype_cmd_map = vim.tbl_extend("force", {
--         python = "python3 <<-EOF\n%s\nEOF",
--       }, opts.filetype_cmd_map)
--
--       local function config_sql_wrapper(path)
--         return vim.require("flow.util").read_sql_config(path)
--       end
--
--       -- optional DB configuration for running .sql files/snippets (experimental)
--       opts.sql_configs = opts.sql_configs
--         or config_sql_wrapper(
--           vim.fn.stdpath("data") .. "flow/flowdb/.db_config.json"
--         )
--     end,
--   },
  {
    "TheBlob42/houdini.nvim",
    config = true,
    enabled = env.houdini.enable,
    opts = {
      mappings = { "jj", "jk" },
      timeout = vim.o.timeoutlen,
      check_modified = true,
    },
    event = "VeryLazy",
  },
  {
    "axieax/urlview.nvim",
    cmd = "UrlView",
    config = true,
    opts = {
      default_picker = "native",
      default_title = "  󱅸",
    },
    keys = {
      {
        "gLg",
        "<CMD>UrlView<CR>",
        mode = "n",
        desc = "url=> view global links",
      },
      {
        "gLl",
        "<CMD>UrlView buffer<CR>",
        mode = "n",
        desc = "url=> view links in buffer",
      },
      {
        "gLp",
        "<CMD>UrlView lazy<CR>",
        mode = "n",
        desc = "url=> view lazy links",
      },
    },
  },


  {
    "trmckay/based.nvim",
    opts = {
      highlight = "BasedHighlight",
    },
    keys = {
      {
        "<leader>Bc",
        function()
          vim.ui.input({ prompt = "base: " }, function(input)
            require("based").convert(input)
          end)
          require("based").convert()
        end,
        mode = { "n", "v" },
        desc = "base=> convert base",
      },
      {
        "<leader>Bh",
        function()
          require("based").convert("hex")
        end,
        mode = { "n", "v" },
        desc = "base=> convert to hex",
      },
      {
        "<leader>Bd",
        function()
          require("based").convert("dec")
        end,
        mode = { "n", "v" },
        desc = "base=> convert to decimal",
      },
    },
  },

  {
    "realprogrammersusevim/readability.nvim",
    cmd = { "ReadabilitySmog", "ReadabilityFlesch" },
  },
  {
    "MisanthropicBit/decipher.nvim",
    opts = {
      float = {
        padding = 2,
        border = env.borders.main,
        title = true,
        title_pos = "right",
        autoclose = true,
        enter = false,
        options = { winblend = 25 },
      },
    },
    config = true,
    keys = {
      {
        "<localleader>ne",
        function()
          vim.ui.input({
            prompt = "value to encode:",
          }, function(input)
            require("decipher").encode("base64", input)
          end)
        end,
        mode = "n",
        desc = "ncode=> encode text (base64)",
      },
      {
        "<localleader>de",
        function()
          vim.ui.input({
            prompt = "value to decode:",
          }, function(input)
            require("decipher").decode("base64", input)
          end)
        end,
        mode = "n",
        desc = "dcode=> decode text (base64)",
      },
    },
  },
  {
    "jbyuki/quickmath.nvim",
    cmd = "Quickmath",
    config = true,
    keys = {
      {
        "<leader>C",
        "<CMD>Quickmath<CR>",
        mode = "n",
        desc = "calc=> open quickmath",
      },
    },
  },
  {
    "t-troebst/perfanno.nvim",
    dependencies = "nvim-telescope/telescope.nvim",
    opts = function(_, opts)
      opts.formats = vim.tbl_deep_extend("force", {
        { percent = true, format = "%.2f%%", minimum = 0.5 },
        { percent = false, format = "%d", minimum = 1 },
      }, opts.formats or {})
      opts.annotate_after_load = opts.annotate_after_load or true
      opts.annotate_on_open = opts.annotate_on_open or true
      opts.telescope = vim.tbl_deep_extend("force", {
        -- Enable if possible, otherwise the plugin will fall back to vim.ui.select
        enabled = pcall(require, "telescope"),
        -- Annotate inside of the preview window
        annotate = true,
      }, opts.telescope or {})

      -- Node type patterns used to find the function that surrounds the cursor
      opts.ts_function_patterns = vim.tbl_deep_extend("force", {
        -- These should work for most languages (at least those used with perf)
        default = {
          "function",
          "method",
        },
        -- Otherwise you can add patterns for specific languages like:
        -- weirdlang = {
        --     "weirdfunc",
        -- }
      }, opts.ts_function_patterns or {})
    end,
    config = true,
  },

}

-- explicitly put all of the component parts to the interface submodule into the
-- final set, this could be automated with some not too difficult algorithms.
-- But, because this is a rather important core component of the entire neovim
-- configuration, I think it makes more sense to be verbose here...personal
-- preferences really.
--
-- as a side note, this also allows to control the order in which the submodules
-- are stacked up which might be kind of nice depending on how you want to build
-- something like this. But this is only relevant for merging the table
-- specifications, it doesn't actually affect the order of the loading of
-- plugins, just how the configurations get stacked beforehand.
return iface_core
